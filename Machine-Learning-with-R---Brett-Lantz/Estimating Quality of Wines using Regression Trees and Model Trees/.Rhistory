install.packages('swirl')
packageVersion('swirl')
r --version
R --version
install.packages('swirl')
install.packages('swirl')
packageVersion('swirl')
library('swirl')
swirl()
swirl()
5+7
x<-5+7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd('testdir')
file.create('mytest.R')
ls()
list.files()
file.exists('mytest.R')
file.info('mytest.R')
file.rename('mytest.R', 'mytest2.R')
file.copy('mytest2.R', 'mytest3.R')
file.path('mytest3.R')
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
unlink('testdir', recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, lenght=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=10)
rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each=10)
library("swirl")
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
oring_function('My first function!')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4,div = 2)
args(remainder)
submit()
evaluate(std,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("I","am","Paresh")
submit()
mad_libs(place = "Pune", adjective = "mad", noun = "statue")
submit()
'I'%p%'love'%p%'R!'
getwd
getwd()
install.packages('lubridate')
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages("ggplot2")
install.packages("jpeg")
install.packages("jpeg")
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
swirl()
str(mpg)
qplot(x = mpg$displ, y = mpg$hwy, data = mpg)
qplot(x = mpg$displ, y = mpg$hwy)
qplot(x = displ, y = hwy, data = mpg)
qplot(x = displ, y = hwy, data = mpg, aes(color = drv) )
qplot(x = displ, y = hwy, data = mpg, color = drv )
qplot(x = displ, y = hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(x = drv, y = hwy, data = mpg, geom = "boxplot")
qplot(x = drv, y = hwy, data = mpg, geom = "boxplot", color = manufacturer)
hist(x = hwy, data = mpg, aes(fill = drv))
hist(mpg, x = hwy, aes(fill = drv))
hist(hwy, mpg, aes(fill = drv))
skip()
qplot(x = displ, y = hwy, data = mpg, facets = . ~ drv)
hist(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
swirL()
swirL()
swirl
swirl()
qplot(x = displ, y = hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(data = mpg, aes(x = displ, y = hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(lm)
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 0.5)
g + geom_point(aes(color =  drv), size = 4, alpha = 0.5)
g + geom_point(aes(color =  drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color =  drv), size = 2, alpha = 0.5) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color =  drv)) + theme_bw(base_family = "Times")
library("swirl")
swirl()
plot(x = myx, y = myy, type = 'l', ylim = c(-3, 3))
g <- ggplot(data = testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(data = mpg, aes(x = displ, y = hwy, color = year))
g <- ggplot(data = mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(facets = drv ~ cyl, margins = TRUE)
g + geom_point() + facet_grid(facets = drv ~ cyl, margins = TRUE) + geom_smooth(method = 'lm', se = FALSE, size = 2, color = 'black')
g + geom_point() + facet_grid(facets = drv ~ cyl, margins = TRUE) + geom_smooth(method = 'lm', se = FALSE, size = 2, color = 'black') + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
library(swirl)
Paresh
swirl()
installed.packages("fields")
installed.packages("fields")
install.packages('fields')
swirl()
dist(dataFrame)
distxy
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = 'blue')
abline(h = 0.4, col = 'red')
5
12
abline(h = 0.05, col = 'green')
dist(dFsm)
hc
heatmap(x = dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
cmat
plot(x = cx, y = cy, col = c('red', 'orange', 'purple'), pch = 3, cex = 2, lwd = 2)
plot(x = cx, y = cy, col = c("red","orange","purple"), pch = 3, cex = 2, lwd = 2)
points(x = cx, y = cy, col = c('red', 'orange', 'purple'), pch = 3, cex = 2, lwd = 2)
mdist(x = x, y = y, cx = cx, cy = cy)
apply(X = distTmp, 2, FUN = which.min)
points(x = x, y = y, pch = 19, cex = 2, cols1[newClust])
points(x = x, y = y, pch = 19, cex = 2, col = cols1[newClust])
tapply(X = x, INDEX = newClust, FUN = mean())
tapply(X = x, INDEX = newClust, FUN = mean)
tapply(X = y, INDEX = newClust, FUN = mean)
points(x = newCx, y = newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x = x, y = y, cx = newCx, cy = newCy)
apply(X = distTmp2, 2, FUN = which.min)
points(x = x, y = y, pch = 19, cex = 2, cols1[newClust2])
points(x = x, y = y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(X = x, INDEX = newClust2, FUN = mean)
tapply(X = y, INDEX = newClust2, FUN = mean)
points(x = finalCx, y = finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
View(dataFrame)
kmeans(x = dataFrame, centers = 3)
kmObj$iter
plot(x = x, y = y, col = kmObj$cluster, pch = 19, cex = 2)
points(x = kmObj$centers, col = c("black","red","green"), pch = 3, cex = 3, lwd = 3)
plot(x = x, y = y, col = kmeans(x = dataFrame, centers = 6), pch = 19, cex = 2)
plot(x = x, y = y, col = kmeans(x = dataFrame, centers = 6)$cluster, pch = 19, cex = 2)
plot(x = x, y = y, col = kmeans(x = dataFrame, centers = 6)$cluster, pch = 19, cex = 2)
plot(x = x, y = y, col = kmeans(x = dataFrame, centers = 6)$cluster, pch = 19, cex = 2)
version
install.packages(c("assertthat", "chron", "colorspace", "curl", "data.table", "DBI", "digest", "fields", "ggplot2", "jsonlite", "openssl", "R6", "Rcpp", "readr", "stringi", "stringr", "swirl", "tibble", "tidyr", "yaml"))
install.packages('rattle')
install.packages('rattle')
install.packages('rattle')
install.packages('RGtk2')
version
setwd("~/Code/Data Science Projects/Machine-Learning-with-R---Brett-Lantz/Estimating Quality of Wines using Regression Trees and Model Trees")
# Estimating Quality of Wines using Regression Trees and Model Trees
setwd("~/Code/Data Science Projects/",
"Machine-Learning-with-R---Brett-Lantz/",
"Estimating Quality of Wines using Regression Trees and Model Trees")
# Estimating Quality of Wines using Regression Trees and Model Trees
setwd(paste0("~/Code/Data Science Projects/",
"Machine-Learning-with-R---Brett-Lantz/",
"Estimating Quality of Wines using Regression Trees and Model Trees"))
# Estimating Quality of Wines using Regression Trees and Model Trees
setwd(paste0("~/Code/Data Science Projects/",
"Machine-Learning-with-R---Brett-Lantz/",
"Estimating Quality of Wines using Regression Trees and Model Trees"))
wine <- read.csv('whitewines.csv')
# Estimating Quality of Wines using Regression Trees and Model Trees
setwd(paste0("~/Code/Data Science Projects/",
"Machine-Learning-with-R---Brett-Lantz/",
"Estimating Quality of Wines using Regression Trees and Model Trees"))
# Reading and exploring data
wine <- read.csv('whitewines.csv')
hist(wine$quality)
# splitting train & test - 75:25
wine.train <- wine[1:3750, ]
wine.test <- wine[3751:4898, ]
# training a model on the data
library(rpart)
model.rpart <- rpart(formula = quality ~ ., data = wine.train)
model.rpart
summary(model.rpart)
# Visualizing decision trees
library(rpart.plot)
rpart.plot(x = model.rpart, digits = 3)
# evaluating model performance
predict.rpart <- predict(object = model.rpart, newdata = wine.test)
# A quick look at the summary statistics of our predictions suggests
# a potential problem; the predictions fall on a much narrower range
# than the true values
summary(predict.rpart)
summary(wine.test$quality)
# This finding suggests that the model is not correctly identifying the
# extreme cases, in particular the best and worst wines. On the other
# hand, between the first and third quartile, we may be doing well.
# We'll use corelation to compare how well the predicted values
# correspond to the true values
cor(x = predict.rpart, y = wine.test$quality)
# Measuring performance with the mean absolute error
MAE <- function(actual, predicted){
mean(abs(actual - predicted))
}
MAE(actual = wine.test$quality, predicted = predict.rpart)
# This implies that, on average, the difference between our model's
# predictions and the true quality score was about 0.57. On a quality
# scale from zero to 10, this seems to suggest that our model is
# doing fairly well.
# On the other hand, recall that most wines were neither very good nor
# very bad; the typical quality score was around five to six. Therefore,
# a classifier that did nothing but predict the mean value may still do
# fairly well according to this metric.
mean(wine.test$quality)
# If we predicted the value 5.85 for every wine sample, we would have a
# mean absolute error of only about
MAE(actual = 5.85, wine.test$quality)
# Our regression tree (MAE = 0.57) comes closer on average to the true
# quality score than the imputed mean (MAE = 0.59), but not by much.
# improving model performance
library(RWeka)
model.m5p <- M5P(formula = quality ~., data = wine.train)
model.m5p
summary(model.m5p)
predict.m5p <- predict(object = model.m5p, newdata = wine.test)
cor(x = predict.m5p, y = wine.test$quality)
MAE(actual = wine.test$quality, predicted = predict.m5p)
save.image("~/Code/Data Science Projects/Machine-Learning-with-R---Brett-Lantz/Estimating Quality of Wines using Regression Trees and Model Trees/x.RData")
